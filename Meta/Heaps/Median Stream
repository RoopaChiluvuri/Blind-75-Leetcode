def findMedian(arr):
  output = []
  min_heap = []
  max_heap = []
  
  
  for num in arr:
    if not max_heap or num <= -max_heap[0]:
      heapq.heappush(max_heap, -num)
    else:
      heapq.heappush(min_heap, num)
         
    # Balance the heaps
    if len(max_heap) > len(min_heap) + 1:
      heapq.heappush(min_heap, -heapq.heappop(max_heap))
    elif len(min_heap) > len(max_heap):
      heapq.heappush(max_heap, -heapq.heappop(min_heap))
      
     # Calculate the median 
    if len(max_heap) > len(min_heap):
      output.append(-max_heap[0])
    else:
      median = (-max_heap[0] + min_heap[0]) // 2
      output.append(median)
  return output
      
    
# Time Complexity is O(nlogn)
# Space Complexity is O(n)
