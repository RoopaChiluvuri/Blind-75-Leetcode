# Solution 1  

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        return Counter(s) == Counter(t)

# Time Complexity is O(n)
# Space Complexity is O(n)


# Soution 2

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:   
        return sorted(s) == sorted(t)

# Time Complexity is O(n log n)
# Space Complexity is O(n)


# Solution 3

class Solution:
    def isAnagram(self, s: str, t: str) -> bool:
        if len(s) != len(t):
            return False
    
        CountS, CountT = {}, {}

        for i in range(len(s)):
            CountS[s[i]] = 1 + CountS.get(s[i], 0)
            CountT[t[i]] = 1 + CountT.get(t[i], 0)

        for c in CountS:
            if CountS[c] != CountT.get(c,0):
                return False
        return True

# Time and Space Complexity is  o(s + t)

