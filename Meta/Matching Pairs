import math
# Add any extra import statements you may need here


# Add any helper functions you may need here


def matching_pairs(s, t):
  n = len(s)
  matching = 0
  mismatched = []
  s_set, t_set = set(), set()
  s_to_t_pairs = set()
  
  for i in range(n):
    if s[i] == t[i]:
      matching += 1
    else:
      mismatched.append((s[i],t[i]))
      s_set.add(s[i])
      t_set.add(t[i])
      s_to_t_pairs.add((s[i], t[i]))
      
      
  if not mismatched:
    return max(0, matching - 2)
  
  for s_char, t_char in mismatched:
    if (t_char,s_char) in s_to_t_pairs:
      return matching + 2
    
   
  if s_set & t_set :
    return matching + 1
  
  return max(0, matching -1)
   
  
# Time Complexity is O(n)
# Space Complexity is O(n)











# These are the tests we use to determine if the solution is correct.
# You can add your own at the bottom.

def printInteger(n):
  print('[', n, ']', sep='', end='')

test_case_number = 1

def check(expected, output):
  global test_case_number
  result = False
  if expected == output:
    result = True
  rightTick = '\u2713'
  wrongTick = '\u2717'
  if result:
    print(rightTick, 'Test #', test_case_number, sep='')
  else:
    print(wrongTick, 'Test #', test_case_number, ': Expected ', sep='', end='')
    printInteger(expected)
    print(' Your output: ', end='')
    printInteger(output)
    print()
  test_case_number += 1

if __name__ == "__main__":
  s_1, t_1 = "abcde", "adcbe"
  expected_1 = 5
  output_1 = matching_pairs(s_1, t_1)
  check(expected_1, output_1)

  s_2, t_2 = "abcd", "abcd"
  expected_2 = 2
  output_2 = matching_pairs(s_2, t_2)
  check(expected_2, output_2)

  # Add your own test cases here
  
