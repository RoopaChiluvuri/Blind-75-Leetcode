def reorderList(self, head: Optional[ListNode]) -> None:
        if not head or not head.next:
            return 

        # Find the middle of the list 
        slow, fast = head, head
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next

        # Reverse the second half
        prev, curr = None, slow.next
        slow.next = None
        while curr:
            next_node = curr.next
            curr.next = prev
            prev = curr
            curr = next_node

        # Merge two halves
        first, second = head, prev
        while second:
            temp1, temp2 = first.next, second.next
            first.next = second
            second.next = temp1 
            first, second = temp1, temp2

# Time Complexity is O(n)
# Space complexity is O(1) 
