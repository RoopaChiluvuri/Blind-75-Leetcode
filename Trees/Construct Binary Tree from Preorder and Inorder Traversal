def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        inorder_map = {val : idx for idx,val in enumerate(inorder)} 

        def helper(pre_left,pre_right,in_left,in_right):

            if pre_left > pre_right or in_left > in_right:
                return None

            root_val = preorder[pre_left]
            root = TreeNode(root_val)

            inorder_index = inorder_map[root_val]

            left_size = inorder_index - in_left

            root.left = helper(pre_left+1, pre_left+left_size, in_left, inorder_index-1)
            root.right = helper(pre_left+left_size+1,pre_right ,inorder_index +1, in_right)

            return root 

        return helper(0, len(preorder)-1, 0, len(inorder)-1)

# Time Complexity is O(n)
# Space Complexity is O(n)
