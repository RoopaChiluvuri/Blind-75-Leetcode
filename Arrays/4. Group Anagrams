# Solution 1

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:

        res = defaultdict(list)

        for s in strs:
            count = [0] * 26
            for c in s:
                count[ord(c) - ord("a")] += 1
            res[tuple(count)].append(s)
        return res.values()


  # Time Complexity and Space Complexity is O(m*n)
        # where m is Total no of Input strings
        # n is avg length of each string



# Solution 2 

class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        d = defaultdict(list)
        for s in strs:
            t = "".join(sorted(list(s)))
            d[t].append(s)
        return d.values()
    
# Time Complexity: O(n * klogk)
                    where n is the number of strings  
                    k is the average length of each string.
# Space Complexity:O(n * k)


